name: Run Py label_generator

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: "Generate labels"

  pull_request:
    branches:
      - main
        
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch names.
        id: branch-names
        uses: tj-actions/branch-names@v6

      - name: Checkout repo content
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.branch-names.outputs.head_ref_branch }}

      - name: Current branch name
        run: |
          echo "${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "feature/test" current PR branch.

      - name: Running on a non tag based branch and a PR branch.
        if: steps.branch-name.outputs.is_default == 'false'
        run: |
          echo "Running on branch: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on branch: feature/test".

      - name: Running on a pull request (i.e non tag based branch).
        if: steps.branch-name.outputs.is_tag == 'false' && steps.branch-name.outputs.is_default == 'false'
        run: |
          echo "Running on branch: ${{ steps.branch-name.outputs.current_branch }}"
        # Outputs: "Running on branch: feature/test".

      - name: Get Ref branch name
        run: |
          echo "${{ steps.branch-name.outputs.ref_branch }}"
        #  Outputs: "1/merge"

      - name: Get Head Ref branch name (i.e The current pull request branch)
        run: |
          echo "${{ steps.branch-name.outputs.head_ref_branch }}"
        # Outputs: "feature/test" current PR branch.

      - name: Get Base Ref branch name (i.e The target of a pull request.)
        run: |
          echo "${{ steps.branch-name.outputs.base_ref_branch }}"
        # Outputs: "main".

      - name: Default branch name
        run: |
          echo "${{ steps.branch-name.outputs.default_branch }}"
        # Outputs: "main" the default branch.



#      - name: Setup python
#        uses: actions/setup-python@v4
#        with:
#          python-version: "3.10" # install the python version needed
#
#      - name: Install python packages
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r .github/requirements.txt
#
#      - name: Execute py script
#        run: python .github/scripts/labels_generator.py
#
#      - uses: nrwl/last-successful-commit-action@v1
#        id: last_successful_commit_pull_request
#        with:
#          branch: ${{ steps.branch-name.outputs.current_branch }} # Get the last successful commit on master or main branch
#          workflow_id: 'run_generate_labels.yml'
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Run changed-files with the commit of the last successful test workflow run on main
#        id: changed-files-base-sha-pull-request
#        uses: tj-actions/changed-files@v34
#        with:
#          base_sha: ${{ steps.last_successful_commit_pull_request.outputs.commit_hash }}


#      - name: Check diff
#        uses: technote-space/get-diff-action@v6
#        with:
#          ref: ${{ github.event.pull_request.head.ref }}

#        with:
#          FILES: |
#            .github/labeler.yml

#      - name: Commit files
#        run: |
#          git config --local user.email "action@github.com"
#          git config --local user.name "GitHub Action"
#          git add -A
#          git commit -m "bot: Update Readme" -a
#        if: env.GIT_DIFF && env.MATCHED_FILES
#
#      - name: Push changes
#        uses: ad-m/github-push-action@v0.6.0
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          branch: ${GITHUB_REF#refs/heads/}
#        if: env.GIT_DIFF && env.MATCHED_FILES
